<style>
.small-code pre code {
  font-size: 1em;
}
</style>



PROGRAMACIÓN Y DATA SCIENCE CON R
========================================================
author: Nestor Montaño
date: Octubre.2017
autosize: true
transition: rotate
<small> 
Vicerrectorado de Formación Académica y Profesional    
Universidad de Guayaquil
</small>






Manejo de datos de tipo Caracter en R
========================================================
type: sub-section




Comando as.character
========================================================

```{r}
# as.character para convertir en texto
v_num <- 1:10
v_num
v_num_txt <- as.character(v_num)
v_num_txt
```



Comando as.character
========================================================

```{r}
# as.character para convertir en texto
v_fact <- factor(letters[1:5])
v_fact
v_fact_txt <- as.character(v_fact)
v_fact_txt
```



Paquete stringr
========================================================

El paquete stringr permite manipular caracteres alojados en vectores, matrices o data.frames

```{r}
# Cargar paquete stringr
library('stringr')
```



Cantidad de caracteres 
========================================================

nchar() calcula la cantidad de caracteres de cada elemento, str_length() además preserva NA
```{r}
v_caracter <- c(head(state.name, n= 3), 'the one', NA)
v_caracter
nchar(v_caracter)
str_length(v_caracter)
```



Concatenar caracteres
========================================================

Para concatenar se usa cat(), paste(), sprintf() o str_c()
```{r}
x <- 7
y <- 10
cat('se tiene x=', x,'\n ','mientras que y=', y)
sprintf('se tiene x= %s mientras que y= %s', x, y)
```



Concatenar caracteres
========================================================

Para concatenar se usa cat(), paste(), sprintf() o str_c()
```{r}
paste('se tiene x=', x,'mientras que y=', y)
paste('se tiene x=', x,'mientras que y=', y, sep='')
paste('se tiene x=', x,'mientras que y=', y, sep='*')
```



Concatenar caracteres
========================================================

Cuando se desea concatenar los elementos de un vector de usa el parámetro collapse
```{r}
paste(c('abc', 'def', 'ghi', 'jkl'), sep= '+')
paste(c('abc', 'def', 'ghi', 'jkl'), collapse= '+')
paste(c('abc', 'def', 'ghi', 'jkl'), collapse= ' ')
```



Concatenar caracteres
========================================================

Cuando se desea concatenar los elementos de un vector de usa el parámetro collapse
```{r}
paste(c('abc', 'def', 'ghi', 'jkl'), 1:4, sep= '+')
paste(c('abc', 'def', 'ghi', 'jkl'), 1:4, collapse= '+')
paste(c('abc', 'def', 'ghi', 'jkl'), 1:4, collapse= '+', sep='?')
```



Concatenar caracteres
========================================================

Tambien se puede concatenar vectores, elemento a elemento; e incluso concatenar el vector resultante en un sólo string
```{r}
paste(c('abc', 'def', 'ghi', 'jkl'), 1:4, sep= '+')
paste(c('abc', 'def', 'ghi', 'jkl'), 1:4, collapse= '+')
paste(c('abc', 'def', 'ghi', 'jkl'), 1:4, collapse= '+', sep='?')
```



Concatenar caracteres
========================================================

str_c() es similar a paste(), pero usa sep= '' por defult.
```{r}
paste('se tiene x=', x, 'mientras que y=', y)
str_c('se tiene x=', x, 'mientras que y=', y)
paste('se tiene x=', x, 'mientras que y=', y, sep='')
str_c('se tiene x=', x, 'mientras que y=', y, sep= ' ')
```



Cortar un caracter
========================================================

substring() muestra los caracteres segun el rango dado
```{r}
substring(text= v_caracter, first= 2, last= 6)
substring(v_caracter, 1:2, 4:5)
```



Cortar un caracter
========================================================

substring() muestra los caracteres segun el rango dado
```{r}
substring('abcdef', 1:6, 1:6)
substring('abcdef', 1:6, 2:7)
substring('abcdef', 1:3, 6:4)
```


Cortar un caracter
========================================================

str_sub() es equivalente a substring()
```{r}
str_sub(string= v_caracter, start= 2, end= 6)
str_sub(v_caracter, 1:2, 4:5)
str_sub('abcdef', 1:6, 1:6)
str_sub('abcdef', 1:6, 2:7)
```



Cortar un caracter
========================================================

strsplit() corta un string de acuerdo a un patrón
```{r}
strsplit(x= v_caracter, split= 'a')
```



Cortar un caracter
========================================================

strsplit() corta un string de acuerdo a un patrón
```{r}
strsplit(x= 'corta un string de acuerdo a un patrón', split= ' ')
unlist(strsplit(x= 'corta un string de acuerdo a un patrón', split= ' '))
```



Cortar un caracter
========================================================

strsplit() y str_split() para cortar un string de acuerdo a un patrón
```{r}
strsplit(x= 'abcdefg', split= '')
str_split(string= 'abcdefg', pattern= '')
```



Cortar un caracter
========================================================

str_split_fixed() permite ajustar el maximo de partes a retornar y así crear una matriz con numero de columnas ajustadas
```{r}
str_split_fixed(string= v_caracter, pattern=  'a', n= 3)
```



Encontrar un patrón
========================================================

grep() retorna los índices de los elementos que cumplen un patron determinado

```{r}
v_caracter
grep(pattern= 'Al', x= v_caracter)
v_caracter[grep(pattern= 'Al', x= v_caracter)]
```



Encontrar un patrón
========================================================

grep() retorna los índices de los elementos que cumplen un patron determinado

```{r}
grep(pattern= 'Al', x= v_caracter, value= TRUE)
grep(pattern= 'o', x= v_caracter, value= TRUE)
grep(pattern= '(Al)|(o)', x= v_caracter, value= TRUE)
```



Encontrar un patrón
========================================================

grep() retorna los índices de los elementos que cumplen un patron determinado

```{r}
grep(pattern= '[0-9]', x= v_caracter, value= TRUE)
grep(pattern= '[b-f]', x= v_caracter, value= TRUE)
grep(pattern= '[b,z]', x= v_caracter, value= TRUE)
```



Encontrar un patrón
========================================================

str_detect() es un wrap de grep, retorna un vector logico según si encontró o no el patrón buscado

```{r}
str_detect(pattern= '[0-9]', string= v_caracter)
str_detect(pattern= '[b-f]', string= v_caracter)
str_detect(pattern= '[b,z]', string= v_caracter)
```



Encontrar un patrón
========================================================

str_extract() devuelve el primer elemento encontrados

```{r}
str_extract(pattern= '[0-9]', string= v_caracter)
str_extract(pattern= '[b-f]', string= v_caracter)
str_extract(pattern= '[b,z]', string= v_caracter)
```



Encontrar un patrón
========================================================

str_extract_all() devuelve los elementos encontrados

```{r}
str_extract_all(pattern= '[b-f]', string= v_caracter)
```



Reemplazar texto
========================================================

sub() y gsub() permiten reemplazar un patron

```{r}
sub(pattern= '[b-f]', replacement= '***', x= v_caracter)
gsub(pattern= '[b-f]', replacement= '***', x= v_caracter)
```



Reemplazar texto
========================================================

str_replace() y str_replace_all() permiten reemplazar un patron

```{r}
str_replace(pattern= '[b-f]', replacement= '***', string= v_caracter)
str_replace_all (pattern= '[b-f]', replacement= '***', string= v_caracter)
```



Encontrar la posición de un patron dentro de un caracter
========================================================

str_locate() y str_locate_all() devuelven la posición del patrón buscado

```{r}
str_locate(pattern= '[b-f]', string= v_caracter)
```



Encontrar la posición de un patron dentro de un caracter
========================================================

str_locate() y str_locate_all() devuelven la posición del patrón buscado

```{r}
str_locate_all (pattern= '[b-f]', string= v_caracter)
```



Eliminar espacios en blanco al inicio o final
========================================================

str_trim() permite eliminar espacios en blanco al inicio, final o ambos 

```{r}
v_caracter_2 <- c('  inicio', 'final   ', '  ambos   ', 'en medio')
str_trim(v_caracter_2, side= 'left')
str_trim(v_caracter_2, side= 'right')
str_trim(v_caracter_2, side= 'both')
```