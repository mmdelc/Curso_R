<style>
.small-code pre code {
  font-size: 1em;
}
</style>


PROGRAMACIÓN Y DATA SCIENCE CON R
========================================================
author: Nestor Montaño
date: Octubre.2017
autosize: true
transition: rotate
<small> 
Vicerrectorado de Formación Académica y Profesional    
Universidad de Guayaquil
</small>



Manipulación de Datos - Básico
========================================================
type: sub-section



Indexado|Selección - Vector
========================================================

Creacion de un vector
```{r}
# Crear un vector para ejemplos
v1 <- seq(from= 10, to= 100, by= 10) # Crear
names(v1) <- letters[1:10]
v1
```



Indexado|Selección - Vector
========================================================

Acceder a elementos según un vector lógico
```{r}
# Selección según un vector lógico
v1>50 & v1<80
v1[v1>50 & v1<80]
```




Indexado|Selección - Vector
========================================================

Acceder a un elemento
```{r}
# Acceder a un elemento
v1[4] 
v1['b']
```



Indexado|Selección - Vector
========================================================
class: small-code
Acceder a elementos segun vector de índices
```{r}
# Selección según vector de índices
v1[1:3]
v1[c(1, 9, 5)]
v1[c(2.1, 2.9)] # Se trunca a la parte entera
```



Indexado|Selección - Vector
========================================================
class: small-code
Acceder a elementos excluyendo índices
```{r}
# Excluir índices
v1[-(4:8)]
v1[-c(1, 5, 9)] 
```



Indexado|Selección - Vector
========================================================

Usa indexado para modificar parte del objeto
```{r}
# Modificar parte del objeto
v1[c(8, 5)] <- c(800, 500)
v1
```



Indexado|Selección - Vector
========================================================
class: small-code
Casos especiales
```{r}
v1[c(2, NA, 5, NULL, 9, NaN, 3, 0)]
v1[c(2, 5, FALSE, TRUE)]
v1[c(NA, 'b', NULL, 'c', 0, 'd', 'x')]
```



Indexado|Selección - Vector
========================================================
class: small-code
Casos especiales
```{r}
v1[c(TRUE, FALSE)]
v1[c(TRUE, FALSE, TRUE)]
v1[11] <- 110
v1[14] <- 110
v1
```



Indexado|Selección - Matriz
========================================================

Creacion de una matriz
```{r}
# Crear matriz para ejemplos
m1 <- matrix(seq(10, 120, by= 10), nrow=  3)
rownames(m1) <- letters[1:3]
colnames(m1) <- LETTERS[1:4]
m1
```



Indexado|Selección - Matriz
========================================================
class: small-code
Acceder a elementos según un vector lógico
```{r}
# Selección según un vector lógico
m1>50 & m1<80
m1[m1>50 & m1<80]
m1[rep(c(TRUE,FALSE), 6)]
```



Indexado|Selección - Matriz
========================================================
class: small-code
Acceder a un elemento
```{r}
# Acceder a un elemento
m1[4] 
m1[2,3]
m1['b', 'C']
m1[c(2,3)] #c(2,3) lo toma como vector
```



Indexado|Selección - Matriz
========================================================

[2, 3] != c(2, 3)
```{r}
# Acceder a un elemento
m1[2,3]
m1[c(2,3)] #c(2,3) lo toma como vector
```


Indexado|Selección - Matriz
========================================================

Acceder a columa o filas completas
```{r}
# Acceder a columa o filas completas
m1[2, ] 
m1[ , 3]

```


Indexado|Selección - Matriz
========================================================

Acceder a columa o filas completas
```{r}
# drop=FALSE Para q no retorne vectores sino matrices
m1[ , 3, drop=FALSE]
m1['c', , drop=FALSE]

```



Indexado|Selección - Matriz
========================================================

Acceder a columa o filas completas
```{r}
# Acceder a columa o filas completas
m1[c(2,3), ]
m1[ , c(4,2)]
```



Indexado|Selección - Matriz
========================================================

Acceder a columa o filas completas
```{r}
# Acceder a columa o filas completas
m1[c('c','a'), ]
m1[ , c('D','B')]
```



Indexado|Selección - Matriz
========================================================

Acceder a elementos segun vector de índices
```{r}
# Acceder a elementos en "x" índices
m1[1:3]
m_index <- matrix(c(1:3,3:1), ncol= 2)
m_index
```



Indexado|Selección - Matriz
========================================================

Acceder a elementos segun vector de índices
```{r}
# Acceder a elementos en "x" índices
m1[m_index]
```



Indexado|Selección - Matriz
========================================================

Acceder a elementos excluyendo índices - No Permitido
```{r eval=TRUE}
# Excluir índices
m1[-c(1, 5, 9)] 
m_index_n <- -m_index
m_index_n
# m1[m_index_n] #Genera un error
```



Indexado|Selección - Matriz
========================================================

Pero sí se permite si se excluye filas o columnas
```{r eval=TRUE}
# Excluir filas/columnas
m1[-c(1, 3), ] 
m1[ , -c(1, 3)] 
```



Indexado|Selección - Matriz
========================================================
class: small-code
Usa indexado para modificar parte del objeto
```{r}
# Modificar parte del objeto
m1[c(11,12)] <- 99
m1
m1[m_index] <- 0
m1
```



Indexado|Selección - Matriz
========================================================

Casos especiales
```{r}
m2 <- m1
m2[c(2, NA, 5, NULL, 9, NaN, 3, 0)]
m2[c(2, 5, FALSE, TRUE)]
m2[c(NA, 'b', NULL, 'c', 0, 'd', 'x')]
```



Indexado|Selección - Matriz
========================================================
class: small-code
Casos especiales
```{r}
m2[c(TRUE, FALSE)]
m2[c(TRUE, FALSE, TRUE)]
m2[11] <- 110
m2[14] <- 110
m2
```



Indexado|Selección - Matriz
========================================================

Casos especiales
```{r}
m1[ , c(TRUE,FALSE)]
m1[c(1,NA), ]
```



Indexado|Selección - Array
========================================================

Aplica lo mismo que para matriz
```{r}
a1 <- array(1:12, dim= c(2,3,2))
a1
```



Indexado|Selección - Array
========================================================

Aplica lo mismo que para matriz
```{r}
a_index <- matrix(c(1,2,1,2,3,2), ncol= 3, byrow= TRUE)
a_index
a1[a_index]
```




Indexado|Selección - Listas
========================================================
class: small-code
Creacion de una lista
```{r}
# Crear un vector para ejemplos
lst1 <- list(ID= 123, Materia="Matematicas", Veces_Tomada= 3, Promedios= c(55,50,65))
lst1
```



Indexado|Selección - Listas
========================================================

Acceder a un elemento
```{r}
# Acceder a un elemento
lst1[[2]] 
lst1$Veces_Tomada
lst1$Promedios
```



Indexado|Selección - Listas
========================================================

Acceder a un elemento
```{r}
# Acceder a un elemento
lst1$Promedios[2]
lst1[[4]][2]
```



Indexado|Selección - Listas
========================================================

**Diferenciar [[]] de []**
```{r}
# Cuarto objeto de la lista
lst1[[4]]
# SubLista que contiene la cuarta entrada de la lista
lst1[4]
```



Indexado|Selección - Listas
========================================================

Diferenciar [[]] de []
```{r}
lst1[[4]][2]
lst1[4][2]
lst1[4][[1]][2]
```



Indexado|Selección - Listas
========================================================

**Diferenciar [[]] de []**

"Si considera a la lista "x" como un tren, entonces x[[5]] es el objeto en el vagón 5; mientras que x[4:6] es un tren que tiene los vagones 4 al 6"

de: @RLangTip



Indexado|Selección - Listas
========================================================

Subconjunto según un vector lógico
```{r}
# lst1 == 3 # ERROR
# lst1[[c(TRUE,FALSE)]] # ERROR
lst1[c(TRUE, FALSE, FALSE, TRUE)]
```



Indexado|Selección - Listas
========================================================
class: small-code
Subconjunto segun vector de índices
```{r}
lst1[c(4,2)]
# lst1[[c(3,2)]] # ERROR
lst1[[c(4,2)]] # 2do elemento del 4to elemento
# lst1[[4,2]] # ERROR
```



Indexado|Selección - Listas
========================================================
class: small-code
Subconjunto excluyendo índices
```{r}
# Excluir índices
lst1[-(2:3)]
lst1[-c(1, 3)] 
```



Indexado|Selección - Listas
========================================================
class: small-code
Usa indexado para modificar parte del objeto
```{r}
# Modificar parte del objeto
lst1[c(1, 3)] <- list(12399,399)
lst1
```



Indexado|Selección - Listas
========================================================
class: small-code
Usa indexado para modificar parte del objeto
```{r}
# Modificar parte del objeto
lst1[[2]] <- 'Matematicas_2'
lst1
```



Indexado|Selección - Listas
========================================================
class: small-code
<small>Casos especiales</small>
```{r}
lst1[c(2, NA, 4, NULL, 1, NaN, 3, 0)]
```


Indexado|Selección - Listas
========================================================
class: small-code
<small>Casos especiales</small>
```{r}
lst1[c(2, 4, FALSE, TRUE)]
```



Indexado|Selección - Listas
========================================================
class: small-code
<small>Casos especiales</small>
```{r}
lst1[c(NA, 'ID', NULL, 4)]
```



Indexado|Selección - Listas
========================================================
class: small-code
<small>Casos especiales</small>
```{r}
lst1[6]
lst1[6] <- 110
lst1
```





Indexado|Selección - Data Frame
========================================================
class: small-code
<small>Recordar que un data frame es una lista de vectores, por tanto el indexado es parecido, tambien un dataframe se compone de filas y columnas, por tanto el indexado es también parecido al de una matriz</small>
```{r}
# Cargar un Data frame
df_1  <- data.frame( Nombre= c('Ana', 'Berni', 'Carlos', 'Daniel', 'Ericka'), Edad = c(20,19,20,19,18), Ciudad= factor(c('Gye', 'Uio', 'Cue', 'Gye', 'Cue')) )
rownames(df_1) <- letters[1:5]
df_1
```



Indexado|Selección - Data Frame
========================================================
class: small-code
Selección de variables/columnas
```{r}
# Selección de variables/columnas
df_1$Edad
df_1[ ,2]
df_1[ ,'Edad']
df_1[[2]]
```



Indexado|Selección - Data Frame
========================================================

Selección de variables/columnas
```{r}
# Selección de variables/columnas
df_1[ ,'Edad']
df_1[[2]]
```



Indexado|Selección - Data Frame
========================================================
class: small-code
Acceder a columa o filas completas
```{r}
# Acceder a columa o filas completas
df_1[ , c(2,3)]
df_1[ , c('Edad','Ciudad')]
```



Indexado|Selección - Data Frame
========================================================

Acceder a columa o filas completas
```{r}
# Acceder a columa o filas completas
df_1[c(2,3), ]
df_1[c('b','c'), ]
```



Indexado|Selección - Data Frame
========================================================

Selección de variables/columnas
```{r}
# Aquí en realidad se está obteniendo un dataframe, no un vector
# Simil al caso de las listas
df_1[2]
```



Indexado|Selección - Data Frame
========================================================

Acceder a filas según un vector lógico
```{r}
# Selección según un vector lógico
df_1$Edad < 20
df_1[df_1$Edad < 20, ]
```



Indexado|Selección - Data Frame
========================================================

Acceder a filas según un vector lógico
```{r}
# Selección según un vector lógico
df_1[c(TRUE, FALSE, TRUE, FALSE, FALSE), ]
```



Indexado|Selección - Data Frame
========================================================
class: small-code
Acceder a columnas según un vector lógico
```{r}
# Selección de columnas con vector lógico
df_1[ , c(TRUE, FALSE, TRUE)]
df_1[c(TRUE, FALSE, TRUE)]
```



Indexado|Selección - Data Frame
========================================================

Seleccionar fila y columna determinada
```{r}
# Seleccionar fila y columna determinada
df_1[2, 3] 
df_1['b', 'Ciudad'] 
```



Indexado|Selección - Data Frame
========================================================

Seleccionar fila y columna determinada
```{r}
# Seleccionar fila y columna determinada
df_1$Ciudad[2]
df_1$Ciudad['b'] # ERROR
```



Indexado|Selección - Data Frame
========================================================

Seleccionar filas y columna determinada
```{r}
# Acceder a un elemento
df_1[2:3, c(3,1)] 
df_1[c('b','c'), c('Ciudad', 'Nombre')]
```



Indexado|Selección - Data Frame
========================================================
class: small-code
[2, 3] != c(2, 3)
```{r}
# Acceder a un elemento
df_1[2,3]
# Muestra las columnas correspondientes
df_1[c(2,3)] 
```



Indexado|Selección - Data Frame
========================================================

Acceder a elementos segun vector de índices
```{r}
# Acceder a elementos en "x" índices
m_index <- matrix(c(1:3,3:1), ncol= 2)
m_index
```



Indexado|Selección - Data Frame
========================================================

Acceder a elementos segun vector de índices
```{r}
# Acceder a elementos en "x" índices
df_1[m_index]
```



Indexado|Selección - Data Frame
========================================================
class: small-code
Acceder a elementos excluyendo filas/columnas
```{r eval=TRUE}
# Excluir columnas
df_1[-c(2)] 
df_1[ ,-c(2)] 
```



Indexado|Selección - Data Frame
========================================================
class: small-code
Acceder a elementos excluyendo filas/columnas
```{r eval=TRUE}
# Excluir filas
df_1[-c(1, 3), ] 
# Excluir filas y columnas
df_1[-c(1, 3), -c(1)] 
```



Indexado|Selección - Data Frame
========================================================

Pero sí se permite si se excluye filas o columnas
```{r eval=TRUE}
# Excluir filas/columnas
m1[-c(1, 3), ] 
m1[ , -c(1, 3)] 
```



Indexado|Selección - Data Frame
========================================================
class: small-code
Usa indexado para modificar parte del objeto
```{r}
# Modificar parte del objeto
df_1[ df_1$Nombre == 'Daniel', c('Edad')] <- 29
# df_1$Ciudad[1] <- 'aaa'  # ERROR, manejo factores
df_1$Ciudad[1] <- 'Cue'
df_1
```



Indexado|Selección - Data Frame
========================================================
class: small-code
Casos especiales
```{r}
df_2 <- df_1
#  df_2[ ,c(1, NA,3)] # ERROR
df_2[c(1, NA,3), ]
```



Indexado|Selección - Data Frame
========================================================
class: small-code
Casos especiales
```{r}
df_2[ ,c(TRUE, FALSE)] # Selecciona columnas
df_2[c(TRUE, FALSE), ] # Selecciona filas
```



Indexado|Selección - which
========================================================
class: small-code
which devuelve los indices que cumplen la condición
```{r}
v1 # Mostrar v1
v1 >= 100 # Vector Lógico
which(v1 >= 100) # Indices TRUE
```



Indexado|Selección - which
========================================================

which en un data frame
```{r}
which(df_1$Edad >= 20) # Indices TRUE
df_1[which(df_1$Edad >= 20), ]
```



Indexado|Selección - which
========================================================

which en un data frame
```{r}
which(df_1$Edad >= 20) # Indices TRUE
df_1[which(df_1$Edad >= 20), ]
```



Indexado|Selección - NAs
========================================================
class: small-code
Data.frame con NA
```{r}
df_2 <- rbind(df_1, c('Ana', NA, 'Gye'))
df_2 #mostrar df_2
df_2[df_2$Edad >= 20, ] # Notar NA
```


Indexado|Selección - NAs
========================================================
class: small-code
Data.frame con NA
```{r}
df_2 #mostrar df_2
df_2[which(df_2$Edad >= 20), ] # Notar NA
```


Ordenar - Vector
========================================================
class: small-code
Comando sort odena el vector
```{r}
v1
sort(v1)
sort(v1, na.last= NA)
```



Ordenar - Vector
========================================================
class: small-code
Comando sort odena el vector
```{r}
sort(v1, na.last= TRUE)
sort(v1, na.last= FALSE)
```



Ordenar - Vector
========================================================
class: small-code
Comando order, devuelve los indices 
```{r}
order(v1)
order(v1, na.last= NA)
order(v1, na.last= TRUE)
```



Ordenar - Vector
========================================================
class: small-code
Comando rank, devuelve un ranking manejando igualdades
```{r}
rank(v1)
# Notar los valores 9.5
rank(v1, ties.method = 'min')     
```



Ordenar - Vector
========================================================
class: small-code
Comando rank, devuelve un ranking manejando igualdades
```{r}
rank(v1)
# Notar los valores 9.5
rank(v1, ties.method = 'min')     
```



Ordenar - Matrix
========================================================
class: small-code
Recordar Matriz es un vector con dimensión
```{r}
m1
sort(m1) # Sort devuelve un vector
```



Ordenar - Data.Frame
========================================================

sort sólo acepta vectores
```{r}
df_1
# sort(df_1) # ERROR
```



Ordenar - Data.Frame
========================================================

Se utiliza order
```{r}
order( df_1$Edad, df_1$Ciudad) # Devuelve indices
df_1[order( df_1$Edad, df_1$Ciudad), ]
```



Ordenar - Data.Frame
========================================================
class: small-code
Descendente?
```{r}
order( -df_1$Edad, df_1$Ciudad) # Devuelve indices
df_1[order( df_1$Edad, df_1$Ciudad), ]
```



Ordenar - Data.Frame
========================================================
class: small-code
Uso de with
```{r}
with( df_1, order( -Edad, Ciudad)) # Devuelve indices
df_1[with( df_1, order( -Edad, Ciudad)) , ]
```



Transponer|Rotar - Vectores
========================================================
class: small-code
Transponer
```{r}
v1
t(v1)
```



Transponer|Rotar - Matrices
========================================================

Transponer
```{r}
m1
t(m1)
```



Transponer|Rotar - Data.frame
========================================================
class: small-code
Transponer
```{r}
df_1
t(df_1) # Devuelve una matriz
```



Subconjuntos - usando indexado
========================================================

Por medio de indexado
```{r}
v1[v1 > 100]

df_1[ df_1$Edad >= 20, ]
```



Subconjuntos - comando subset
========================================================

Subset
```{r}
subset(v1, v1 > 100)

subset(df_1, Edad >= 20)
```



Subconjuntos - comando subset
========================================================

En resumen, subset presenta las filas que cumplen la condicion
```{r}
subset(m1, m1[,4] >= 110)

# m2 <- subset(m1, m1[3,] < 100) ## ERROR
subset(m1, c(T,F,T))
# subset(m1, c(T,F,F,T)) ## ERROR
```



Subconjuntos - comando subset
========================================================

Subset en matrices
```{r}
m1_na <- m1
m1_na[3, 4] <- NA
m1_na
subset(m1_na, m1[,4] >= 110)
```



Subconjuntos - subset vs indexado
========================================================

Facilita el trabajo y elimina directamente NAs
```{r}
# Crear data.frame con NA
df_2 <- rbind(df_1, c('Ana', NA, 'Gye'))
df_2
```



Subconjuntos - subset vs indexado
========================================================

Facilita el trabajo y elimina directamente NAs
```{r}
df_2[df_2$Edad >= 20, ]

```



Subconjuntos - subset vs indexado
========================================================

Permite seleccionar columnas
```{r}
subset(df_2, Edad >= 20, select= c(Nombre, Edad) )
```



Subconjuntos - subset vs indexado
========================================================

Permite seleccionar columnas
```{r}
subset(df_2, Edad >= 20, select= c(-Nombre) )
```



Subconjuntos - subset vs indexado
========================================================

Se recomienda utilizar subset sólo en scripts, no dentro de funciones por posibles problemas con la "Non standar Evaluation", más información en [http://adv-r.had.co.nz/Computing-on-the-language.html#subset] (http://adv-r.had.co.nz/Computing-on-the-language.html#subset)



Unir datos - Aumentar filas
========================================================

Comando rbind
```{r}
df_1 # mostrar df_1
```



Unir datos - Aumentar filas
========================================================

Comando rbind
```{r}
df_2 # mostrar df_2
```



Unir datos - Aumentar filas
========================================================
class: small-code
Comando rbind   
(PD: ver que hace con rownames)
```{r}
rbind(df_1, df_2) # df_1 + df_2 
```



Unir datos - Aumentar filas
========================================================
class: small-code
Comando rbind permite aumentar las filas de un conjunto de datos debajo del otro.
```{r}
# Crear dataframe df_3
df_3 <- data.frame(a= 1:3, b= letters[1:3])
df_3
# Crear dataframe df_4, que es df_1 con otros nombres de columna
df_4 <- df_1 
names(df_4) <- LETTERS[1:3]
```



Unir datos - Aumentar filas
========================================================

Objetos a unir deben tener mismo numero de columnas
```{r}
# rbind(df_1, df_3) ## ERROR
# rbind(df_1, df_4) ## ERROR
```



Unir datos - Aumentar filas
========================================================

rbind toma control de factores
```{r}
df_3 <- data.frame(aa= LETTERS[1:3], a= 1:3, b= letters[1:3])
names(df_3) <- names(df_1)
df_3
```



Unir datos - Aumentar filas
========================================================

rbind toma control de factores
```{r}
df_4 <- rbind(df_1, df_3)
df_4
```



Unir datos - Eliminar filas
========================================================

```{r}
df_4 <- df_4[-c(1,3,7), ]
df_4
```



Unir datos - Aumentar filas
========================================================

rbind toma control de factores
```{r}
str(df_4)
```



Unir datos - Aumentar columnas|variables
========================================================

Comando cbind permite aumentar las columnas de un conjunto de datos a lado del otro
```{r}
df_5 <- data.frame(A= 1:5, B= letters[1:5])
cbind(df_1, df_5)
```



Unir datos - Aumentar columnas|variables
========================================================

Se puede crear una variable directamente
```{r}
df_5$C <- seq(10,50,10)
df_5
```



Unir datos - Aumentar variables
========================================================

Crear una variable como transformacion de otra
```{r}
df_1$Edad_2 <- df_1$Edad/2 + 100
df_1
```



Unir datos - Eliminar columnas|variables
========================================================
class: small-code
```{r}
df_1$Edad_2 <- NULL
df_1
df_5 <- df_5[ , -c(1,3), drop = FALSE] 
df_5
```



Unir datos - Eliminar columnas|variables
========================================================

```{r}
df_5 <- data.frame(A= 1:5, B= letters[1:5], C= seq(10,50,10))
df_5
```


Unir datos - Eliminar columnas|variables
========================================================
<small>Obtener las columnas que no se llamen 'A' o 'C'</small>
```{r}
df_5 <- df_5[ , !(names(df_5) %in% c('A', 'C')), drop = FALSE] 
df_5
```



Unir datos - Merge|Join|Buscarv
========================================================

- Se tienen dos data.frames con columnas o variables que hacen las veces de “key” o “id” de los mismos
- Se desea agregar al primer conjunto el contenido del segundo conjunto de datos si y sólo si el “key” o “id” del segundo conjunto corresponde con el “key” o “id” del primer conjunto de datos. 
- Parecido al Buscarv y Vlookup de excel
- Equivalente al Join de Bases de datos



Unir datos - Merge|Join|Buscarv
========================================================

Comando Merge 
```{r}
df_6 <- data.frame(A= c('Ana', 'Daniel','Jose'), B= c(100,200,300))
df_6
```



Unir datos - Merge|Join|Buscarv
========================================================

Comando Merge 
```{r}
merge(x= df_1, y= df_6, by.x= 'Nombre', by.y= 'A')
```



Unir datos - Merge|Join|Buscarv
========================================================

Mantener todo los datos del primer objeto como en un left join o un buscarv

```{r}
merge(x= df_1, y= df_6, by.x= 'Nombre', by.y= 'A', all.x= TRUE)
```



Unir datos - Merge|Join|Buscarv
========================================================

Mantener todo los datos del segudo objeto como en un right join

```{r}
merge(x= df_1, y= df_6, by.x= 'Nombre', by.y= 'A', all.y= TRUE)
```



Unir datos - Merge|Join|Buscarv
========================================================

Mantener todo los datos de ambos objetos como en un full join

```{r}
merge(x= df_1, y= df_6, by.x= 'Nombre', by.y= 'A', all= TRUE)
```



Unir datos - Merge|Join|Buscarv
========================================================

Merge con varias columnas

```{r}
df_6 <- cbind(df_6, data.frame(Z= c(20,40,30)))
df_6
```



Unir datos - Merge|Join|Buscarv
========================================================

Merge con varias columnas   
PD: Ver el ordenamiento en el resultado

```{r}
merge(x= df_1, y= df_6, by.x= c('Nombre', 'Edad'), by.y= c('A','Z'), all= TRUE)
```



Unir datos - Merge|Join|Buscarv
========================================================

Para que no se ordenen los datos al hacer el merge

```{r}
merge(x= df_1, y= df_6, by.x= c('Nombre', 'Edad'), by.y= c('A','Z'), all= TRUE, sort= FALSE)
```



Unir datos - Merge|Join|Buscarv
========================================================
class: small-code
Para realizar merge de varios dataframes se usa Reduce

```{r}
df_11 <- cbind(Nombre= df_1[,1, drop=FALSE], df_11=11)
df_12 <- cbind(Nombre= df_1[,1, drop=FALSE], df_12=12)
df_13 <- cbind(Nombre= df_1[,1, drop=FALSE], df_13=13)
Reduce(function(...){
  merge(..., by= 'Nombre', all= TRUE)
  }, list(df_1, df_11, df_12, df_13))
```



%in% y match entre dos vectores
========================================================

- `match(x= , table= )`   
Si *x[i]* es encontrado en *table[j]*, entonces en la `i-ésima` posición del vector resultante se tendrá el valor `j`, para los más pequeños j posible
- `%in% `   
Devuelve un vector lógico indicando si existe match en cada elemento del primer objeto 




%in% y match entre dos vectores
========================================================
class: small-code

```{r}
# Definir semilla para reproducibilidad
set.seed(5) 
# crear un data.frame base 
df_base <- data.frame(Alum = LETTERS[1:6], Mat = sample(x = 1:10, size = 6, replace = TRUE), Len = sample(x = 1:10, size = 6, replace = TRUE))
df_base
```



%in% y match entre dos vectores
========================================================

```{r}
# crear un data.frame que contendra los valores a modificar 
df_modificatorio <- data.frame(Alum = c("E", "C"), Mat = c(99, 88)) 
# presentar data.frame 
df_modificatorio
```



%in% y match entre dos vectores
========================================================
```{r}
# %in%
df_base$Alum %in% df_modificatorio$Alum
df_modificatorio$Alum %in% df_base$Alum
```



%in% y match entre dos vectores
========================================================
```{r}
# match
match(x= df_base$Alum, table= df_modificatorio$Alum, nomatch= 0)
match(x= df_modificatorio$Alum, table= df_base$Alum, nomatch= 0)
```



%in% y match entre dos vectores
========================================================
class: small-code
Indexar con %in%  o  match
```{r}
# %in%
df_base[df_base$Alum %in% df_modificatorio$Alum, ]
df_modificatorio[df_modificatorio$Alum %in% df_base$Alum, ]
```



%in% y match entre dos vectores
========================================================
class: small-code
Indexar con %in%  o  match
```{r}
# match
df_base[match(x = df_modificatorio$Alum, table = df_base$Alum, nomatch = 0), ]
df_modificatorio[match(x= df_base$Alum, table= df_modificatorio$Alum, nomatch= 0), ]
```



%in% y match entre dos vectores
========================================================
class: small-code
Comportamiento con valores repetidos
```{r}
# Aumentar una fila con Alum repetido
df_base <- rbind(df_base, c("E", 1, 1))
df_base
df_modificatorio <- rbind(df_modificatorio, data.frame(Alum= "Z", Mat= 20))
df_modificatorio
```



%in% y match entre dos vectores
========================================================
class: small-code
Comportamiento con valores repetidos
```{r}
# %in%
df_base[df_base$Alum %in% df_modificatorio$Alum, ]
df_modificatorio[df_modificatorio$Alum %in% df_base$Alum, ]
```



%in% y match entre dos vectores
========================================================
class: small-code
Comportamiento con valores repetidos, match sólo devuelve el primer repetido
```{r}
# match
df_base[match(x = df_modificatorio$Alum, table = df_base$Alum, nomatch = 0), ]
df_modificatorio[match(x= df_base$Alum, table= df_modificatorio$Alum, nomatch= 0), ]
```



%in% y match entre dos vectores
========================================================
class: small-code
<small>¿Que hacer si se requiere modificar el df_base$Mat según los valores de df_modificatorio$Mat?</small>
```{r}
# Primer intento: ERROR, sólo actualiza un "E"
df_base[match(x = df_modificatorio$Alum, table = df_base$Alum, nomatch = 0), "Mat"] <- df_modificatorio[df_modificatorio$Alum %in% df_base$Alum, "Mat"]
df_base
```



%in% y match entre dos vectores
========================================================
class: small-code
¿Que hacer si se requiere modificar el df_base$Mat según los valores de df_modificatorio$Mat?
```{r}
# Creamos nuevamente el data.frame df_base 
set.seed(5) 
df_base <- data.frame(Alum = LETTERS[1:6], Mat = sample(x = 1:10, size = 6, replace = TRUE), Len = sample(x = 1:10, size = 6, replace = TRUE), stringsAsFactors = FALSE) 
df_base <- rbind(df_base, c("E", 1, 1)) 
df_base
```



%in% y match entre dos vectores
========================================================
class: small-code
¿Que hacer si se requiere modificar el df_base$Mat según los valores de df_modificatorio$Mat?
```{r}
# df_base- coincidentes en el orden de df_base
df_base[df_base$Alum %in% df_modificatorio$Alum, ]
# df_modificatorio- coincidencias en el orden de df_base
df_modificatorio[match(x = df_base$Alum, table = df_modificatorio$Alum, nomatch = 0), ]
```



%in% y match entre dos vectores
========================================================
class: small-code
¿Que hacer si se requiere modificar el df_base$Mat según los valores de df_modificatorio$Mat?
```{r}
df_base[df_base$Alum %in% df_modificatorio$Alum, 'Mat'] <- df_modificatorio[match(x = df_base$Alum, table = df_modificatorio$Alum, nomatch = 0), 'Mat']
df_base
```



Attach
========================================================

Ubica el data.frame en la posición 2 del "search path" (que es donde busca R por las variables)
```{r}
mean(df_1$Edad)
attach(df_1)
# Buscará Edad en las variables del data.frame
mean(Edad)
```



Attach
========================================================

```{r}
# Si se realiza asignaciones en realidad no se cambia el data.frame original
Edad <- Edad + 100
Edad
detach(df_1)
df_1$Edad
```



Attach
========================================================

```{r}
# eliminar variable Edad creada 
rm(Edad)
# para preservar la asignación
attach(df_1)
df_1$Edad <- Edad + 100
detach(df_1)
df_1$Edad
```



Encontrar filas duplicadas
========================================================
class: small-code
unique() devuelve cada uno de los valores únicos del vector o dataframe

```{r}
unique(df_1$Ciudad)
unique(df_1)
```



Encontrar filas duplicadas
========================================================
class: small-code
duplicated() devuelve un vector lógico, FALSE si es la primer vez observado y TRUE si ya se ha observado

```{r}
duplicated(df_1$Ciudad)
duplicated(df_1)
df_1[!duplicated(df_1$Ciudad), ]
```



